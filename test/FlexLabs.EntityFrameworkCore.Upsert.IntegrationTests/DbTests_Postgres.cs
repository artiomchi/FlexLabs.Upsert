using System.Data.Common;
using System.Linq;
using FlexLabs.EntityFrameworkCore.Upsert.IntegrationTests.Base;
using FlexLabs.EntityFrameworkCore.Upsert.Tests.EF;
using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using Npgsql;
using Testcontainers.PostgreSql;
using Testcontainers.Xunit;
using Xunit;
using Xunit.Sdk;

namespace FlexLabs.EntityFrameworkCore.Upsert.IntegrationTests
{
#if !NOPOSTGRES
    public class DbTests_Postgres(DbTests_Postgres.DatabaseInitializer contexts) : DbTestsBase(contexts), IClassFixture<DbTests_Postgres.DatabaseInitializer>
    {
        public sealed class DatabaseInitializer(IMessageSink messageSink) : ContainerisedDatabaseInitializerFixture<PostgreSqlBuilder, PostgreSqlContainer>(new PostgresFixture(messageSink))
        {
            public override DbDriver DbDriver => DbDriver.Postgres;

            protected override void ConfigureContextOptions(DbContextOptionsBuilder<TestDbContext> builder)
            {
                builder.UseNpgsql(new NpgsqlDataSourceBuilder(ConnectionString + ";Include Error Detail=true")
                    .EnableDynamicJson()
                    .Build());
            }

            private class PostgresFixture(IMessageSink messageSink) : DbContainerFixture<PostgreSqlBuilder, PostgreSqlContainer>(messageSink)
            {
                public override DbProviderFactory DbProviderFactory
                    => NpgsqlFactory.Instance;

                protected override PostgreSqlBuilder Configure(PostgreSqlBuilder builder)
                    => ConfigureContainer(builder);
            }
        }

        [Fact]
        public void GeneratedAlwaysAsIdentity_NoUpdate_New()
        {
            ResetDb();
            using var dbContext = new TestDbContext(_fixture.DataContextOptions);

            var newItem = new GeneratedAlwaysAsIdentity
            {
                Num1 = 1,
            };

            dbContext.GeneratedAlwaysAsIdentity.Upsert(newItem)
                .On(j => j.Num1)
                .NoUpdate()
                .Run();

            dbContext.GeneratedAlwaysAsIdentity.OrderBy(t => t.ID).Should().SatisfyRespectively(
                test => test.Should().MatchModel(new GeneratedAlwaysAsIdentity
                {
                    Num1 = 1,
                    Num2 = GeneratedAlwaysAsIdentity_NextId, // autogenerated
                }));
        }
    }
#endif
}
